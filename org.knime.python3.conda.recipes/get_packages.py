import os
import argparse
import sys
import requests
import shutil


def download(url, output_folder):
    # TODO: add https://github.com/rsalmei/alive-progress ? :)
    output_fname = os.path.join(output_folder, os.path.basename(url))

    if os.path.exists(output_fname):
        print(f"\t\talready cached -> skipping {url}")
        return

    if url.startswith("file://"):
        src_fname = url[7:]
        shutil.copy(src_fname, output_fname)
    else:
        req = requests.get(url)
        with open(output_fname, "wb") as f:
            f.write(req.content)


def download_all(pkg_set, output_folder):
    for idx, pkg in enumerate(pkg_set):
        print(f"\tdownloading {idx}/{len(pkg_set)}: {pkg}")
        download(pkg, output_folder)


def parse_pkgs(fname):
    with open(fname) as f:
        lines = [l.strip() for l in f.readlines()]
        lines = [l for l in lines if not l.startswith("#") and not l == "@EXPLICIT"]
        return set(lines)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="""
        Download the packages in an explicit package list to a given folder.
        If a base package list is given, then only the packages that are not
        contained in that base list are downloaded.
        """
    )
    parser.add_argument(
        "pkg_list_file",
        type=str,
        help='File containing an explicit package list generated by "conda list --explicit"',
    )
    parser.add_argument(
        "--base",
        type=str,
        help='Optional: File containing a base package list generated by "conda list --explicit". Packages contained in this base list will not be downloaded',
    )
    parser.add_argument(
        "--dest",
        type=str,
        default=".",
        help="Destination folder where packages will be stored. Folder will be created if it does not exist. (default: current directory)",
    )

    args = parser.parse_args()

    print(f"Loading package list from '{args.pkg_list_file}'")
    pkg_set = parse_pkgs(args.pkg_list_file)

    if args.base is not None:
        print(f"Loading base package list from '{args.base}'")
        base_pkg_set = parse_pkgs(args.base)
        pkg_set = pkg_set.difference(base_pkg_set)

    print(f"Downloading to '{args.dest}'")
    if not os.path.exists(args.dest):
        os.makedirs(args.dest)
    download_all(pkg_set, args.dest)
